{"version":3,"sources":["components/UI/Section.module.css","components/Tasks/TaskItem.module.css","components/Tasks/Tasks.module.css","components/NewTask/TaskForm.module.css","components/UI/Section.js","components/Tasks/TaskItem.js","components/Tasks/Tasks.js","components/NewTask/TaskForm.js","components/hooks/use-http.js","components/NewTask/NewTask.js","App.js","index.js"],"names":["module","exports","Section","props","className","classes","section","children","TaskItem","task","Tasks","taskList","items","length","map","text","id","content","error","onClick","onFetch","loading","container","TaskForm","taskInputRef","useRef","form","onSubmit","event","preventDefault","enteredValue","current","value","trim","onEnterTask","type","ref","useHttp","useState","isLoading","setIsLoading","setError","sendRequest","useCallback","requestConfig","applyData","a","fetch","url","method","headers","body","JSON","stringify","response","ok","Error","json","data","message","NewTask","sendTaskRequest","createTask","taskText","taskData","createdTask","name","onAddTask","enterTaskHandler","bind","App","tasks","setTasks","fetchTasks","useEffect","tasksObj","loadedTasks","taskKey","push","Fragment","prevTasks","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.376112dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__ozpOb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"TaskItem_task__3LNeW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tasks_container__OI3dx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TaskForm_form__3yMDw\"};","import classes from './Section.module.css';\n\nconst Section = (props) => {\n  return <section className={classes.section}>{props.children}</section>;\n};\n\nexport default Section;\n","import classes from './TaskItem.module.css';\n\nconst TaskItem = (props) => {\n  return <li className={classes.task}>{props.children}</li>\n};\n\nexport default TaskItem;","import Section from '../UI/Section';\nimport TaskItem from './TaskItem';\nimport classes from './Tasks.module.css';\n\nconst Tasks = (props) => {\n  let taskList = <h2>No tasks found. Start adding some!</h2>;\n\n  if (props.items.length > 0) {\n    taskList = (\n      <ul>\n        {props.items.map((task) => (\n          <TaskItem key={task.id}>{task.text}</TaskItem>\n        ))}\n      </ul>\n    );\n  }\n\n  let content = taskList;\n\n  if (props.error) {\n    content = <button onClick={props.onFetch}>Try again</button>;\n  }\n\n  if (props.loading) {\n    content = 'Loading tasks...';\n  }\n\n  return (\n    <Section>\n      <div className={classes.container}>{content}</div>\n    </Section>\n  );\n};\n\nexport default Tasks;\n","import { useRef } from 'react';\n\nimport classes from './TaskForm.module.css';\n\nconst TaskForm = (props) => {\n  const taskInputRef = useRef();\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredValue = taskInputRef.current.value;\n\n    if (enteredValue.trim().length > 0) {\n      props.onEnterTask(enteredValue);\n    }\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitHandler}>\n      <input type='text' ref={taskInputRef} />\n      <button>{props.loading ? 'Sending...' : 'Add Task'}</button>\n    </form>\n  );\n};\n\nexport default TaskForm;\n","import { useCallback, useState } from \"react\";\r\n\r\n\r\n// Custom hooks are outsourcing stateful logic into reusable functions.\r\n// By removing the parameters to the custom hook function ( useHttp() ) we can avoid addding dependencies to the useEffect hook\r\nconst useHttp = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    /*\r\n    The React useCallback Hook returns a memoized callback function.\r\n    This allows us to isolate resource intensive functions so that they will not automatically run on every render.\r\n    The useCallback Hook only runs when one of its dependencies update.\r\n    This can improve performance.\r\n    */\r\n    const sendRequest = useCallback(\r\n        // By adding the parameters to the async function we can avoid addding dependencies to the useEffect hook\r\n        async (requestConfig, applyData) => {\r\n            setIsLoading(true);\r\n            setError(null);\r\n            try {\r\n                // The below fetch api function is able to work with both POST and GET request types\r\n                const response = await fetch(requestConfig.url, {\r\n                    method: requestConfig.method ? requestConfig.method : 'GET',\r\n                    headers: requestConfig.headers ? requestConfig.headers : {},\r\n                    body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Request failed!');\r\n                }\r\n\r\n                const data = await response.json();\r\n                applyData(data);\r\n            } catch (err) {\r\n                setError(err.message || 'Something went wrong!');\r\n            }\r\n            setIsLoading(false);\r\n        }, []);\r\n\r\n    // return {\r\n    //     isLoading: isLoading,\r\n    //     error: error,\r\n    //     sendRequest: sendRequest\r\n    // };\r\n    // Below object is the ES6 shortcut for the above object.\r\n    return {\r\n        isLoading,\r\n        error,\r\n        sendRequest\r\n    };\r\n};\r\n\r\nexport default useHttp;\r\n","import Section from '../UI/Section';\nimport TaskForm from './TaskForm';\nimport useHttp from '../hooks/use-http';\n\nconst NewTask = (props) => {\n  const { isLoading, error, sendRequest: sendTaskRequest } = useHttp();\n\n  const createTask = (taskText, taskData) => {\n    const generatedId = taskData.name; // firebase-specific => \"name\" contains generated id\n    const createdTask = { id: generatedId, text: taskText };\n\n    props.onAddTask(createdTask);\n  };\n\n  const enterTaskHandler = async (taskText) => {\n\n    sendTaskRequest({\n      url: 'https://react-http-1e116-default-rtdb.firebaseio.com/tasks.json',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      // JSON.stringify is already done in use-http.js for the body of the fetch api.\n      body: { text: taskText }\n    },\n      // Indirect Execution - bind method is used to prepares the function which is called for future execution.\n      // Bind function allows us to \"preconfigure\" which arguments that a function should receive when it's getting called\n      // and also define what \"this\" keyword should refer inside the function.\n      // Syntax:\n      // bind(thisArg, arg1, ... , argN)\n\n      // Examples:\n      // const boundGetX = retrieveX.bind(module);\n      createTask.bind(null, taskText));\n  };\n\n  return (\n    <Section>\n      <TaskForm onEnterTask={enterTaskHandler} loading={isLoading} />\n      {error && <p>{error}</p>}\n    </Section>\n  );\n};\n\nexport default NewTask;\n","import React, { useEffect, useState } from 'react';\n\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport useHttp from './components/hooks/use-http';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  // Object destructing is done to assign the values to individual variable\n  // sendRequest function in app.js is a property in object which is used as fetchTask function in this file.\n  // By removing the parameters to the custom hook function ( useHttp() ) we can avoid addding dependencies to the useEffect hook\n  const { isLoading, error, sendRequest: fetchTasks } = useHttp();\n\n  // The useEffect Hook allows you to perform side effects in your components.\n  // Some examples of side effects are: fetching data, directly updating the DOM, and timers.\n  useEffect(() => {\n    // tranformTasks() function is used to convert the object to array which is returned from the REST API(firebase).\n    const transformTasks = (tasksObj) => {\n      const loadedTasks = [];\n\n      for (const taskKey in tasksObj) {\n        loadedTasks.push({ id: taskKey, text: tasksObj[taskKey].text });\n      }\n\n      setTasks(loadedTasks);\n    };\n\n    // By adding the parameters to the fetchTasks() function we can avoid addding dependencies to the useEffect hook\n    fetchTasks(\n      { url: 'https://react-http-1e116-default-rtdb.firebaseio.com/tasks.json' },\n      transformTasks\n    ); // eslint-disable-next-line\n  }, []);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}